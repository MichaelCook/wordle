#!/usr/bin/env python3
import sys
import os
import argparse
import re
import logging
from enum import Enum
from typing import Final, Set, List, Tuple, Dict

# ----------------------------------------------------------------------------

parser = argparse.ArgumentParser(description="""
Suggest Wordle guesses
""")

parser.add_argument('--num-suggestions', '-n', type=int, default=10,
                    metavar='N', help="""
Maximum number of suggestions to show (default: %(default)s)
""")

parser.add_argument('--all', '-a', action='store_true', help="""
For each word in the Wordle dictionary, show the best series of guesses
""")

parser.add_argument('--debug', action='store_true', help="""
Enable debug logging
""")

parser.add_argument('attempts', nargs='*', help="""
For each attempt:
X - an uppercase letter is correct and in the right place,
x - a lowercase letter is correct but in the wrong place,
/x - letter is not in the solution
""")

OPTS: Final = parser.parse_args()
del parser

logging.basicConfig(level=logging.DEBUG if OPTS.debug else logging.INFO,
                    format='%(name)s: %(levelname)s: %(message)s')
LOGGER: Final = logging.getLogger(os.path.basename(sys.argv[0]))

# ----------------------------------------------------------------------------

Words = Set[str]

# From https://gist.github.com/cfreshman/a03ef2cba789d8cf00c08f767e0fad7b
# See also: https://www.reddit.com/r/wordle/comments/s4tcw8/a_note_on_wordles_word_list/
WORDS: Final = """
aback abase abate abbey abbot abhor abide abled abode abort about above abuse
abyss acorn acrid actor acute adage adapt adept admin admit adobe adopt adore
adorn adult affix afire afoot afoul after again agape agate agent agile aging
aglow agony agora agree ahead aider aisle alarm album alert algae alibi alien
align alike alive allay alley allot allow alloy aloft alone along aloof aloud
alpha altar alter amass amaze amber amble amend amiss amity among ample amply
amuse angel anger angle angry angst anime ankle annex annoy annul anode antic
anvil aorta apart aphid aping apnea apple apply apron aptly arbor ardor arena
argue arise armor aroma arose array arrow arson artsy ascot ashen aside askew
assay asset atoll atone attic audio audit augur aunty avail avert avian avoid
await awake award aware awash awful awoke axial axiom axion azure bacon badge
badly bagel baggy baker baler balmy banal banjo barge baron basal basic basil
basin basis baste batch bathe baton batty bawdy bayou beach beady beard beast
beech beefy befit began begat beget begin begun being belch belie belle belly
below bench beret berry berth beset betel bevel bezel bible bicep biddy bigot
bilge billy binge bingo biome birch birth bison bitty black blade blame bland
blank blare blast blaze bleak bleat bleed bleep blend bless blimp blind blink
bliss blitz bloat block bloke blond blood bloom blown bluer bluff blunt blurb
blurt blush board boast bobby boney bongo bonus booby boost booth booty booze
boozy borax borne bosom bossy botch bough boule bound bowel boxer brace braid
brain brake brand brash brass brave bravo brawl brawn bread break breed briar
bribe brick bride brief brine bring brink briny brisk broad broil broke brood
brook broom broth brown brunt brush brute buddy budge buggy bugle build built
bulge bulky bully bunch bunny burly burnt burst bused bushy butch butte buxom
buyer bylaw cabal cabby cabin cable cacao cache cacti caddy cadet cagey cairn
camel cameo canal candy canny canoe canon caper caput carat cargo carol carry
carve caste catch cater catty caulk cause cavil cease cedar cello chafe chaff
chain chair chalk champ chant chaos chard charm chart chase chasm cheap cheat
check cheek cheer chess chest chick chide chief child chili chill chime china
chirp chock choir choke chord chore chose chuck chump chunk churn chute cider
cigar cinch circa civic civil clack claim clamp clang clank clash clasp class
clean clear cleat cleft clerk click cliff climb cling clink cloak clock clone
close cloth cloud clout clove clown cluck clued clump clung coach coast cobra
cocoa colon color comet comfy comic comma conch condo conic copse coral corer
corny couch cough could count coupe court coven cover covet covey cower coyly
crack craft cramp crane crank crash crass crate crave crawl craze crazy creak
cream credo creed creek creep creme crepe crept cress crest crick cried crier
crime crimp crisp croak crock crone crony crook cross croup crowd crown crude
cruel crumb crump crush crust crypt cubic cumin curio curly curry curse curve
curvy cutie cyber cycle cynic daddy daily dairy daisy dally dance dandy datum
daunt dealt death debar debit debug debut decal decay decor decoy decry defer
deign deity delay delta delve demon demur denim dense depot depth derby deter
detox deuce devil diary dicey digit dilly dimly diner dingo dingy diode dirge
dirty disco ditch ditto ditty diver dizzy dodge dodgy dogma doing dolly donor
donut dopey doubt dough dowdy dowel downy dowry dozen draft drain drake drama
drank drape drawl drawn dread dream dress dried drier drift drill drink drive
droit droll drone drool droop dross drove drown druid drunk dryer dryly duchy
dully dummy dumpy dunce dusky dusty dutch duvet dwarf dwell dwelt dying eager
eagle early earth easel eaten eater ebony eclat edict edify eerie egret eight
eject eking elate elbow elder elect elegy elfin elide elite elope elude email
embed ember emcee empty enact endow enema enemy enjoy ennui ensue enter entry
envoy epoch epoxy equal equip erase erect erode error erupt essay ester ether
ethic ethos etude evade event every evict evoke exact exalt excel exert exile
exist expel extol extra exult eying fable facet faint fairy faith false fancy
fanny farce fatal fatty fault fauna favor feast fecal feign fella felon femme
femur fence feral ferry fetal fetch fetid fetus fever fewer fiber fibre ficus
field fiend fiery fifth fifty fight filer filet filly filmy filth final finch
finer first fishy fixer fizzy fjord flack flail flair flake flaky flame flank
flare flash flask fleck fleet flesh flick flier fling flint flirt float flock
flood floor flora floss flour flout flown fluff fluid fluke flume flung flunk
flush flute flyer foamy focal focus foggy foist folio folly foray force forge
forgo forte forth forty forum found foyer frail frame frank fraud freak freed
freer fresh friar fried frill frisk fritz frock frond front frost froth frown
froze fruit fudge fugue fully fungi funky funny furor furry fussy fuzzy gaffe
gaily gamer gamma gamut gassy gaudy gauge gaunt gauze gavel gawky gayer gayly
gazer gecko geeky geese genie genre ghost ghoul giant giddy gipsy girly girth
given giver glade gland glare glass glaze gleam glean glide glint gloat globe
gloom glory gloss glove glyph gnash gnome godly going golem golly gonad goner
goody gooey goofy goose gorge gouge gourd grace grade graft grail grain grand
grant grape graph grasp grass grate grave gravy graze great greed green greet
grief grill grime grimy grind gripe groan groin groom grope gross group grout
grove growl grown gruel gruff grunt guard guava guess guest guide guild guile
guilt guise gulch gully gumbo gummy guppy gusto gusty gypsy habit hairy halve
handy happy hardy harem harpy harry harsh haste hasty hatch hater haunt haute
haven havoc hazel heady heard heart heath heave heavy hedge hefty heist helix
hello hence heron hilly hinge hippo hippy hitch hoard hobby hoist holly homer
honey honor horde horny horse hotel hotly hound house hovel hover howdy human
humid humor humph humus hunch hunky hurry husky hussy hutch hydro hyena hymen
hyper icily icing ideal idiom idiot idler idyll igloo iliac image imbue impel
imply inane inbox incur index inept inert infer ingot inlay inlet inner input
inter intro ionic irate irony islet issue itchy ivory jaunt jazzy jelly jerky
jetty jewel jiffy joint joist joker jolly joust judge juice juicy jumbo jumpy
junta junto juror kappa karma kayak kebab khaki kinky kiosk kitty knack knave
knead kneed kneel knelt knife knock knoll known koala krill label labor laden
ladle lager lance lanky lapel lapse large larva lasso latch later lathe latte
laugh layer leach leafy leaky leant leapt learn lease leash least leave ledge
leech leery lefty legal leggy lemon lemur leper level lever libel liege light
liken lilac limbo limit linen liner lingo lipid lithe liver livid llama loamy
loath lobby local locus lodge lofty logic login loopy loose lorry loser louse
lousy lover lower lowly loyal lucid lucky lumen lumpy lunar lunch lunge lupus
lurch lurid lusty lying lymph lynch lyric macaw macho macro madam madly mafia
magic magma maize major maker mambo mamma mammy manga mange mango mangy mania
manic manly manor maple march marry marsh mason masse match matey mauve maxim
maybe mayor mealy meant meaty mecca medal media medic melee melon mercy merge
merit merry metal meter metro micro midge midst might milky mimic mince miner
minim minor minty minus mirth miser missy mocha modal model modem mogul moist
molar moldy money month moody moose moral moron morph mossy motel motif motor
motto moult mound mount mourn mouse mouth mover movie mower mucky mucus muddy
mulch mummy munch mural murky mushy music musky musty myrrh nadir naive nanny
nasal nasty natal naval navel needy neigh nerdy nerve never newer newly nicer
niche niece night ninja ninny ninth noble nobly noise noisy nomad noose north
nosey notch novel nudge nurse nutty nylon nymph oaken obese occur ocean octal
octet odder oddly offal offer often olden older olive ombre omega onion onset
opera opine opium optic orbit order organ other otter ought ounce outdo outer
outgo ovary ovate overt ovine ovoid owing owner oxide ozone paddy pagan paint
paler palsy panel panic pansy papal paper parer parka parry parse party pasta
paste pasty patch patio patsy patty pause payee payer peace peach pearl pecan
pedal penal pence penne penny perch peril perky pesky pesto petal petty phase
phone phony photo piano picky piece piety piggy pilot pinch piney pinky pinto
piper pique pitch pithy pivot pixel pixie pizza place plaid plain plait plane
plank plant plate plaza plead pleat plied plier pluck plumb plume plump plunk
plush poesy point poise poker polar polka polyp pooch poppy porch poser posit
posse pouch pound pouty power prank prawn preen press price prick pride pried
prime primo print prior prism privy prize probe prone prong proof prose proud
prove prowl proxy prude prune psalm pubic pudgy puffy pulpy pulse punch pupal
pupil puppy puree purer purge purse pushy putty pygmy quack quail quake qualm
quark quart quash quasi queen queer quell query quest queue quick quiet quill
quilt quirk quite quota quote quoth rabbi rabid racer radar radii radio rainy
raise rajah rally ralph ramen ranch randy range rapid rarer raspy ratio ratty
raven rayon razor reach react ready realm rearm rebar rebel rebus rebut recap
recur recut reedy refer refit regal rehab reign relax relay relic remit renal
renew repay repel reply rerun reset resin retch retro retry reuse revel revue
rhino rhyme rider ridge rifle right rigid rigor rinse ripen riper risen riser
risky rival river rivet roach roast robin robot rocky rodeo roger rogue roomy
roost rotor rouge rough round rouse route rover rowdy rower royal ruddy ruder
rugby ruler rumba rumor rupee rural rusty sadly safer saint salad sally salon
salsa salty salve salvo sandy saner sappy sassy satin satyr sauce saucy sauna
saute savor savoy savvy scald scale scalp scaly scamp scant scare scarf scary
scene scent scion scoff scold scone scoop scope score scorn scour scout scowl
scram scrap scree screw scrub scrum scuba sedan seedy segue seize semen sense
sepia serif serum serve setup seven sever sewer shack shade shady shaft shake
shaky shale shall shalt shame shank shape shard share shark sharp shave shawl
shear sheen sheep sheer sheet sheik shelf shell shied shift shine shiny shire
shirk shirt shoal shock shone shook shoot shore shorn short shout shove shown
showy shrew shrub shrug shuck shunt shush shyly siege sieve sight sigma silky
silly since sinew singe siren sissy sixth sixty skate skier skiff skill skimp
skirt skulk skull skunk slack slain slang slant slash slate slave sleek sleep
sleet slept slice slick slide slime slimy sling slink sloop slope slosh sloth
slump slung slunk slurp slush slyly smack small smart smash smear smell smelt
smile smirk smite smith smock smoke smoky smote snack snail snake snaky snare
snarl sneak sneer snide sniff snipe snoop snore snort snout snowy snuck snuff
soapy sober soggy solar solid solve sonar sonic sooth sooty sorry sound south
sower space spade spank spare spark spasm spawn speak spear speck speed spell
spelt spend spent sperm spice spicy spied spiel spike spiky spill spilt spine
spiny spire spite splat split spoil spoke spoof spook spool spoon spore sport
spout spray spree sprig spunk spurn spurt squad squat squib stack staff stage
staid stain stair stake stale stalk stall stamp stand stank stare stark start
stash state stave stead steak steal steam steed steel steep steer stein stern
stick stiff still stilt sting stink stint stock stoic stoke stole stomp stone
stony stood stool stoop store stork storm story stout stove strap straw stray
strip strut stuck study stuff stump stung stunk stunt style suave sugar suing
suite sulky sully sumac sunny super surer surge surly sushi swami swamp swarm
swash swath swear sweat sweep sweet swell swept swift swill swine swing swirl
swish swoon swoop sword swore sworn swung synod syrup tabby table taboo tacit
tacky taffy taint taken taker tally talon tamer tango tangy taper tapir tardy
tarot taste tasty tatty taunt tawny teach teary tease teddy teeth tempo tenet
tenor tense tenth tepee tepid terra terse testy thank theft their theme there
these theta thick thief thigh thing think third thong thorn those three threw
throb throw thrum thumb thump thyme tiara tibia tidal tiger tight tilde timer
timid tipsy titan tithe title toast today toddy token tonal tonga tonic tooth
topaz topic torch torso torus total totem touch tough towel tower toxic toxin
trace track tract trade trail train trait tramp trash trawl tread treat trend
triad trial tribe trice trick tried tripe trite troll troop trope trout trove
truce truck truer truly trump trunk truss trust truth tryst tubal tuber tulip
tulle tumor tunic turbo tutor twang tweak tweed tweet twice twine twirl twist
twixt tying udder ulcer ultra umbra uncle uncut under undid undue unfed unfit
unify union unite unity unlit unmet unset untie until unwed unzip upper upset
urban urine usage usher using usual usurp utile utter vague valet valid valor
value valve vapid vapor vault vaunt vegan venom venue verge verse verso verve
vicar video vigil vigor villa vinyl viola viper viral virus visit visor vista
vital vivid vixen vocal vodka vogue voice voila vomit voter vouch vowel vying
wacky wafer wager wagon waist waive waltz warty waste watch water waver waxen
weary weave wedge weedy weigh weird welch welsh wench whack whale wharf wheat
wheel whelp where which whiff while whine whiny whirl whisk white whole whoop
whose widen wider widow width wield wight willy wimpy wince winch windy wiser
wispy witch witty woken woman women woody wooer wooly woozy wordy world worry
worse worst worth would wound woven wrack wrath wreak wreck wrest wring wrist
write wrong wrote wrung wryly yacht yearn yeast yield young youth zebra zesty
zonal
""".split()

class LetterMatch(Enum):
    RIGHT_LETTER_RIGHT_POSITION = 1
    RIGHT_LETTER_WRONG_POSITION = 2
    WRONG_LETTER = 3

Letter = Tuple[LetterMatch, str]
Attempt = Tuple[Letter, ...]

def letter_index(letter: str) -> int:
    assert 'a' <= letter <= 'z'
    return ord(letter) - ord('a')

def parse_attempt(attempt: str) -> Attempt:
    ret: List[Letter] = []
    remain = attempt
    while remain:
        letter = remain[0]
        remain = remain[1:]
        if letter == '/':
            if not remain:
                raise Exception(f'Invalid {attempt=}')
            letter = remain[0].lower()
            if not ('a' <= letter <= 'z'):
                raise Exception(f'Invalid {letter=} in {attempt=}')
            remain = remain[1:]
            ret.append((LetterMatch.WRONG_LETTER, letter))
            continue
        if 'a' <= letter <= 'z':
            ret.append((LetterMatch.RIGHT_LETTER_WRONG_POSITION, letter))
            continue
        if 'A' <= letter <= 'Z':
            ret.append((LetterMatch.RIGHT_LETTER_RIGHT_POSITION, letter.lower()))
            continue
        raise Exception(f'Invalid {letter=} in {attempt=}')
    if len(ret) != 5:
        raise Exception(f'Invalid {attempt=}')
    return tuple(ret)

def make_attempt(target: str, guess: str) -> Attempt:
    assert len(target) == 5
    assert len(guess) == 5

    # How many times each letter a..z appears in `target` but excluding all
    # letters that are in the right position in `guess`
    count = [0] * 26
    for i in range(5):
        if target[i] != guess[i]:
            count[letter_index(target[i])] += 1

    attempt = []
    for i in range(5):
        if target[i] == guess[i]:
            attempt.append((LetterMatch.RIGHT_LETTER_RIGHT_POSITION, guess[i]))
            continue
        gi = letter_index(guess[i])
        if count[gi] <= 0:
            attempt.append((LetterMatch.WRONG_LETTER, guess[i]))
            continue
        attempt.append((LetterMatch.RIGHT_LETTER_WRONG_POSITION, guess[i]))
        count[gi] -= 1

    assert len(attempt) == 5
    return tuple(attempt)

def word_from_attempt(attempt: Attempt) -> str:
    return ''.join(x[1] for x in attempt)

def word_score(word: str, position_letter_scores: List[List[int]]) -> int:
    return sum(position_letter_scores[i][letter_index(letter)]
               for i, letter in enumerate(word))

def make_word_scores() -> Dict[str, int]:
    # position_letter_scores[i][j] is the number of times
    # letter j=0..25 appears in position i=0..4 in the full word list
    position_letter_scores = [[0] * 26 for _ in range(5)]
    for word in WORDS:
        for i, letter in enumerate(word):
            position_letter_scores[i][letter_index(letter)] += 1
    LOGGER.debug('position_letter_scores=%r', position_letter_scores)

    return {word: word_score(word, position_letter_scores) for word in WORDS}

def possible_word(word: str, attempt: Attempt) -> bool:
    debug = word == 'zzzzz'   # the word whose analysis to debug
    assert len(word) == 5
    assert len(attempt) == 5
    count_rl = [0] * 26       # count of right letters in the wrong position in `attempt`
    count_wl = [0] * 26       # count of wrong letters in `attempt`
    count_actual = [0] * 26   # count of letters in `word` not in the right position
    for i, (match, letter) in enumerate(attempt):
        if match == LetterMatch.RIGHT_LETTER_WRONG_POSITION:
            count_rl[letter_index(letter)] += 1
        elif match == LetterMatch.WRONG_LETTER:
            count_wl[letter_index(letter)] += 1
        else:
            continue
        count_actual[letter_index(word[i])] += 1
    if debug:
        print(f'{attempt=}')
        print(f'{count_rl    =}')
        print(f'{count_wl    =}')
        print(f'{count_actual=}')
    for i in range(26):
        if count_actual[i] < count_rl[i]:
            if debug: print('False')
            return False
        if count_wl[i] != 0 and count_actual[i] > count_rl[i]:
            if debug: print('False')
            return False
    if debug: print('True')
    return True

def get_suggestions(attempts: List[Attempt], word_scores: Dict[str, int]) -> List[str]:
    # For all letters that are in the right position, remove all words that
    # don't have that letter in that position
    rlrp = ['.'] * 5
    for attempt in attempts:
        for i, (match, letter) in enumerate(attempt):
            if match == LetterMatch.RIGHT_LETTER_RIGHT_POSITION:
                assert rlrp[i] in ('.', letter)
                rlrp[i] = letter
    pat_re = '^' + ''.join(rlrp) + '$'
    words = set(filter(re.compile(pat_re).match, WORDS))
    LOGGER.debug('[%4d] after rlrp filter on %r', len(words), pat_re)

    # For all letters that are in the wrong position, remove all words that do
    # have that letter in that position
    rlwp: Tuple = tuple(set() for _ in range(5))
    for attempt in attempts:
        for i, (match, letter) in enumerate(attempt):
            if match == LetterMatch.RIGHT_LETTER_WRONG_POSITION:
                rlwp[i].add(letter)
    pat_re = '^' + ''.join(map(lambda x: '[^' + ''.join(x) + ']' if x else '.', rlwp)) + '$'
    words = set(filter(re.compile(pat_re).match, words))
    LOGGER.debug('[%4d] after rlwp filter on %r', len(words), pat_re)

    # Filter on remaining wrong letters
    words = set(word
                for word in words
                if all(possible_word(word, attempt) for attempt in attempts))

    return list(sorted(words, key=lambda word: -word_scores[word]))

def main() -> None:
    LOGGER.debug('[%4d] initial word list', len(WORDS))

    word_scores = make_word_scores()

    if OPTS.all:
        # For each word in our dictionary, show the best series of guesses

        if OPTS.attempts:
            raise Exception('Do not specify any attempts with --all')

        for word in WORDS:
            attempts: List[Attempt] = []
            while True:
                suggestions = get_suggestions(attempts, word_scores)
                best = suggestions[0]
                attempt = make_attempt(word, best)
                attempts.append(attempt)
                if best == word:
                    print(f'{len(attempts)} {word} =', ' '.join(map(word_from_attempt, attempts)))
                    break
    else:
        attempts = list(map(parse_attempt, OPTS.attempts))

        # Show the scores of all attempts.  Also, make sure each attempt is
        # actually a word in our dictionary
        if attempts:
            print('ATTEMPTED:')
            for attempt in attempts:
                word = word_from_attempt(attempt)
                try:
                    print(f'{word_scores[word]:5} {word}')
                except KeyError:
                    LOGGER.warning('Not a valid word: %r', word)
            print()

        suggestions = get_suggestions(attempts, word_scores)

        # Show the final list of words
        print(f'SUGGESTED: ({len(suggestions)})')
        for word in sorted(suggestions, key=lambda word: -word_scores[word])[:OPTS.num_suggestions]:
            print(f'{word_scores[word]:5} {word}')

main()
